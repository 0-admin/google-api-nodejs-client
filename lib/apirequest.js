/**
 * Copyright 2014 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Multipart = require('multipart-stream');

/**
 * Create and make a request to the Google API
 * @param {object}   context  self from the context of the method calling this
 * @param {object}   params   parameters passed from the method call
 * @param {object}   options  options generated by the method call
 * @param {Boolean}  isMedia  whether the request requires media upload
 * @param {Function} callback Callback function
 * @return {Request} request  The request object created
 */
function createAPIRequest(context, params, options, isMedia, callback) {
  var req;
  var media = params.media;
  var resource = params.resource;
  var auth = params.auth;
  delete params.media;
  delete params.resource;
  delete params.auth;

  options = options || {};

  /**
   * If the params are not present, and callback was passed instead,
   * use params as the callback and create empty params.
   */
  if (typeof(params) === 'function') {
    callback = params;
    params = {};
  } else {
    params = params || {};
  }

  if (!auth) {
    auth = {};
  } else if (typeof auth === 'string') {
    auth = { apiKey: auth }; // API KEY
    params.key = params.key || auth.apiKey;
  } else {
    auth = { authClient: auth }; // Auth Client
  }

  if (isMedia) {
    /**
     * Create a boundary identifier and multipart read stream
     * @type {string}
     */
    var boundary = Math.random().toString(36).slice(2);
    var mp = new Multipart(boundary);

    // Always a multipart upload
    params.uploadType = params.uploadType || 'multipart';

    options.headers = {
      'Content-Type': 'multipart/related; boundary="' + boundary + '"'
    };

    // Add parts to multipart request
    if (resource) {
      mp.addPart({
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(resource)
      });
    }

    mp.addPart({
      headers: {
        'Content-Type': resource && resource.mimeType || 'application/octet-stream'
      },
      body: media // can be a readable stream or raw string!
    });
  }
  else {
    options.json = resource || {};
  }

  options.qs = params;

  // create request (using authClient or otherwise and return request obj)
  if (auth.authClient) {
    req = auth.authClient.request(options, callback);
  } else {
    req = context.google._options.transporter.request(options, callback);
  }

  if (mp) mp.pipe(req);

  return req;
}

/**
 * Export only this function
 * @type {Function}
 */
module.exports = createAPIRequest;
