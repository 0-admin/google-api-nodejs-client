var Multipart = require('multipart-stream');

/**
 * Create and make a request to the Google API
 * @param {object}   context  self from the context of the method calling this
 * @param {object}   params   parameters passed from the method call
 * @param {object}   options  options generated by the method call
 * @param {Boolean}  isMedia  whether the request requires media upload
 * @param {Function} callback Callback function
 */
function createAPIRequest(context, params, options, isMedia, callback) {
  var req;
  options = options || {};

  /**
   * If the params are not present, and callback was passed instead,
   * use params as the callback and create empty params.
   */
  if (typeof(params) === 'function') {
    callback = params;
    params = {};
  } else {
    params = params || {};
  }

  /**
   * If apiKey is set in auth, add it as a parameter to request
   */
  if (context.auth && context.auth.apiKey && !params.key) {
    params.key = context.auth.apiKey; // set key as param if present
  }

  if(isMedia) {
    var media = params.media || {};
    delete params.media;

    /**
     * Create a boundary identifier and multipart read stream
     * @type {[type]}
     */
    var boundary = Math.random().toString(36).slice(2);
    var mp = new Multipart(boundary);

    params.uploadType = 'multipart';

    options.headers = {
      'Content-Type': 'multipart/related; boundary="' + boundary + '"'
    };

    // Add parts to multipart request
    mp.addPart({
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(media.metadata || {})
    });

    mp.addPart({
      headers: {
        'Content-Type': media.metadata && media.metadata.mimeType || 'application/octet-stream'
      },
      body: media.data || '' // data can be a readable stream! :D
    });

  }
  else {
    options.json = params.resource || true;
    delete params.resource;
  }

  options.qs = params;

  // create request (using authClient or otherwise and return request obj)
  if (context.auth.authClient && context.auth.authClient.credentials) {
    req = context.auth.authClient.request(options, callback);
  } else {
    req = context.google.transporter.request(options, callback);
  }

  if(mp) mp.pipe(req);

  return req;
}

module.exports = createAPIRequest;
